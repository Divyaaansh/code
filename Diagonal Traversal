#include <iostream>
#include <vector>
using namespace std;

vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
    vector<int> result;
    int m = matrix.size();
    if (m == 0) {
        return result;
    }
    int n = matrix[0].size();
    
    for (int sum = 0; sum <= m + n - 2; ++sum) {
        if (sum % 2 == 0) {  // Upwards
            for (int i = sum; i >= 0; --i) {
                int j = sum - i;
                if (i >= 0 && i < m && j >= 0 && j < n) {
                    result.push_back(matrix[i][j]);
                }
            }
        } else {  // Downwards
            for (int i = 0; i <= sum; ++i) {
                int j = sum - i;
                if (i >= 0 && i < m && j >= 0 && j < n) {
                    result.push_back(matrix[i][j]);
                }
            }
        }
    }
    
    return result;
}

int main() {
    int m, n;
    cin >> m >> n;

    vector<vector<int>> matrix(m, vector<int>(n));

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> matrix[i][j];
        }
    }

    vector<int> diagonal = findDiagonalOrder(matrix);

    for (int num : diagonal) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
